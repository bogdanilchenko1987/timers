{"mappings":"AASA,SAAAA,gBAAAC,EAAAC,G,wWAAA,IAAMC,KAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAGpCG,MAoDG,W,sBApDGA,EACQC,G,IAAAC,EAAAD,EAAEC,O,wBACZC,KAAKC,WAAa,KAClBD,KAAKE,UAAW,EAChBF,KAAKD,OAASA,EACdC,KAAKG,M,yBAGPC,IAAA,O,MAAA,WACE,IAAMC,EAAOL,KAAKM,kBAAkB,GACpCN,KAAKD,OAAOM,E,IAEdD,IAAA,Q,MAAA,W,WACE,IAAIJ,KAAKE,SAAT,CAIA,IAAMK,EAAYC,KAAKC,MACvBT,KAAKE,UAAW,EAChBF,KAAKC,WAAaS,aAAY,WAC5B,IACMC,EADcH,KAAKC,MACOF,EAC1BF,EAAOO,EAAKN,kBAAkBK,GACpCC,EAAKb,OAAOM,E,GAEX,IAXD,C,IAcJD,IAAA,O,MAAA,WACES,cAAcb,KAAKC,YACnBD,KAAKE,UAAW,EAChB,IAAMG,EAAOL,KAAKM,kBAAkB,GACpCN,KAAKD,OAAOM,E,IAGdD,IAAA,oB,MAAA,SAAkBC,GAOhB,MAAO,CAAES,MANKd,KAAKe,IACjBC,KAAKC,MAAMZ,EAAS,MAAyB,OAK/Ba,KAHHlB,KAAKe,IAAIC,KAAKC,MAAMZ,EAAS,KAAoB,MAGxCc,KAFTnB,KAAKe,IAAIC,KAAKC,MAAMZ,EAAS,IAAc,M,IAK1DD,IAAA,M,MAAA,SAAIgB,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,OAMlC,GAAGC,MAAQ,IAAI1B,MAAM,CAAEE,OAAQyB,kBAMlC,SAASA,gBAAgB1B,G,IAAEgB,EAAFhB,EAAEgB,MAAOI,EAATpB,EAASoB,KAAMC,EAAfrB,EAAeqB,KACtC5B,KAAKK,UAAU6B,YAAc,GAAaC,OAAVZ,EAAM,MAAaY,OAATR,EAAK,MAASQ,OAALP,E,CALrD5B,KAAKC,SAASmC,iBAAiB,QAASJ,MAAMK,MAAMC,KAAKN,QAEzDhC,KAAKI,QAAQgC,iBAAiB,QAASJ,MAAMO,KAAKD,KAAKN","sources":["src/js/timer.js"],"sourcesContent":["// import '../css/common.css';\n\n/*\n * - Принимает время в миллисекундах\n * - Высчитывает сколько в них вмещается часов/минут/секунд\n * - Возвращает обьект со свойствами hours, mins, secs\n * - Адская копипаста со стека 💩\n */\n\nconst refs = {\n  startbtn: document.querySelector('button[data-action-start]'),\n  stopbtn: document.querySelector('button[data-action-stop]'),\n  clockface: document.querySelector('.js-clockface'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n    this.init();\n  }\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n  start() {\n    if (this.isActive) {\n      return;\n    }\n\n    const startTime = Date.now();\n    this.isActive = true;\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      const time = this.getTimeComponents(deltaTime);\n      this.onTick(time);\n      // updateClockface(time);\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  getTimeComponents(time) {\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n    // 1--->01\n    // 11-->11\n  }\n}\n\nconst timer = new Timer({ onTick: updateClockface });\n\nrefs.startbtn.addEventListener('click', timer.start.bind(timer));\n\nrefs.stopbtn.addEventListener('click', timer.stop.bind(timer));\n\nfunction updateClockface({ hours, mins, secs }) {\n  refs.clockface.textContent = `${hours}: ${mins}: ${secs}`;\n}\n"],"names":["_classCallCheck","instance","Constructor","refs","startbtn","document","querySelector","stopbtn","clockface","Timer","param","onTick","this","intervalId","isActive","init","key","time","getTimeComponents","startTime","Date","now","setInterval","deltaTime","_this","clearInterval","hours","pad","Math","floor","mins","secs","value","String","padStart","timer","updateClockface","textContent","concat","addEventListener","start","bind","stop"],"version":3,"file":"timer.d57b0f59.js.map"}